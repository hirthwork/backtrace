% Copyright 2011, 2012 by Dmitry Potapov <potapov.d@gmail.com>.
% All rights reserved.
% See file COPYING for more information.

\documentclass{article}
\usepackage{noweb}
\usepackage{hyperref}
\begin{document}
\author{Dmitry Potapov\\
[[potapov.d@gmail.com]]}
\title{Backtrace helper library}
\maketitle

\tableofcontents

\section{Introduction}
The purpose of this library is to provide APIs for current program call
stack retrieval in handy and painless manner.

\section{Rationale}
Current [[backtrace]] implementations ([[glibc]], [[libexecinfo]]) doesn't
provide functionality to retrieve whole backtrace at once. At the same time
[[backtrace_symbols]] prints symbol information in its own manner, which is not
a part of any standard and can vary from one version to another.  Backtrace
helper library is intended to provide functions for complete backtrace retrieval
with instant access to symbol and module name without strings parsing of any
kind.

\section{Installation}

\subsection{Prerequisites}
\begin{enumerate}
\item
Linux or FreeBSD (I haven't performed any testing on other *BSD systems, as
well as on any non-BSD Unix distribution)
\item
\href{http://www.boost.org/boost-build2/}{Boost.Build}
\item
[[glibc]] (other libc implementations wasn't tested yet)
\item
[[g++]] (as Boost.Build uses [[g++]] even for pure C targets build)
\end{enumerate}

\subsection{Pure C library installation}
Change your current working directory to [[backtrace]] source distribution root
and execute the following command:

[[bjam backtrace-install release]]

After this [[backtrace]] library will be built and installed among with required
headers. The default installation prefix is [[/usr/local]] which can be
overridden using {\tt --prefix=<installation path>} option:

[[bjam backtrace-install release --prefix=/usr]]

\subsection{C++-library installation}
Change your current working directory to [[backtrace]] source distribution root
and execute the following command:

[[bjam backtracexx-install release]]

As with the pure C library installation, library and headers will be installed
to [[/usr/local]] by default. Both pure C and C++ versions can be installed
using the following command:

[[bjam backtrace-install backtracexx-install release]]

\subsection{Other installation options}

\subsubsection{Static library installation}
[[Backtrace]] can be built as static library by adding [[link=static]] option to
bjam invocation command. It is possible to build and install static and shared
libraries with single command:

[[bjam backtracexx-install release link=static,shared]]

\subsubsection{Debug version installation}
Debug version of [[backtrace]] library can be installed by invoking installation
command without specifying [[release]] build variant in command line:

[[bjam backtrace-install]]

\subsection{Running tests}
In order to ensure that [[backtrace]] is sane on current environment, unit-tests
can be used:

[[bjam test]]

In this case, unit-tests will be built, executed and their status will be
reported.  For most users it is enough to check the return code of the command
specified above. As for most Linux utilities zero return code states for
successful tests executions without failures.

\section{Getting started}
As stated above, main [[backtrace]] is to retrieve current call stack, there are
two functions provided for this purpose:
\begin{itemize}
\item
[[TBacktraceRecord* GetBacktrace(int* size, int offset, int initialDepth);]]
This function is used for complete call stack retrieval. It returns pointer to
array of backtrace records which was allocated using [[malloc]], or [[NULL]] in
case of failure. This function accepts three parameters:
\begin{description}
\item[size] Output parameter which stores the number of elements in array
returned.
\item[offset] Number of call stack frames to skip. In most cases there is no
need to retrieve the call stack frame of the bottommost function (i.e. function
which is calling [[GetBacktrace]]). In this case 1 can be passed as [[offset]].
Pass 0 here if you want to receive the complete call stack.
\item[initialDepth] Expected call stack depth. [[Backtrace]] will allocate array
of [[initialDepth]] elements to store call stack. If call stack depth is bigger
than size of currently allocated array is not enough to store call stack,
[[backtrace]] will call [[realloc]] with doubled capacity. For example, if
current call stack depth is 5 and [[initialDepth = 2]], then one [[malloc]]
will be called to allocate array of two elements and two [[realloc]]s will be
used to enlarge this array from 2 to 4 and from 4 to 8.
\end{description}
Let's write sample program, which uses [[GetBacktrace]] for call stack
retrieval. First of all, we need to include [[backtrace/backtrace.h]] header
file.  After that we can write the function which will be indirectly called from
[[main]] and will print current call stack:
<<main.c>>=
#include <backtrace/backtrace.h>
<<additional headers inclusion>>

void print_backtrace()
{
    TBacktraceRecord* backtrace;
    <<GetBacktrace invocation>>
    <<print backtrace here>>
    /* don't forget to free memory allocated for backtrace */
    free(backtrace);
}

int some_userful_function()
{
    int everything_is_ok = 0;
    /*
        do some calculations here
        and set everithing_is_ok to 1;
     */
    if (!everithing_is_ok)
        print_backtrace();
    return everything_is_ok;
}

int main()
{
    return some_userful_function();
}

@ As [[GetBacktrace]] uses output parameter, we must declare one and pass its
address as the first parameter. [[print_backtrace]] is just an utility function
and shouldn't print itself in call stack, so we will pass 1 as [[offset]].
[[initialDepth]] will be set to 5 as this will be enough for our program:
<<GetBacktrace invocation>>=
    int size;
    backtrace = GetBacktrace(&size, 1, 5);

@ In order to print information stored in TBacktraceRecord, we need to include
[[backtrace/record.h]], which contains its definition. Since, I'm going to use
[[printf]] as output function, we also need to include [[stdio.h]].
<<additional headers inclusion>>=
#include <backtrace/record.h>
#include <stdio.h>

@
\end{itemize}

\end{document}

