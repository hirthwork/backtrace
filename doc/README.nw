% Copyright 2011, 2012 by Dmitry Potapov <potapov.d@gmail.com>.
% All rights reserved.
% See file COPYING for more information.

\documentclass{article}
\usepackage{noweb}
\usepackage[colorlinks=true, linkcolor=blue, urlcolor=black]{hyperref}
\begin{document}
\author{\href{mailto:potapov.d@gmail.com}{Dmitry Potapov}}
\title{Backtrace helper library}
\maketitle

\tableofcontents

\pagebreak

\section{Introduction}
The purpose of this library is to provide APIs for current program call
stack retrieval in handy and painless manner.

\section{Rationale}
Current [[backtrace]] implementations ([[glibc]], [[libexecinfo]]) doesn't
provide functionality to retrieve whole backtrace at once. At the same time
[[backtrace_symbols]] prints symbol information in its own manner, which is not
a part of any standard and can vary from one version to another.  Backtrace
helper library is intended to provide functions for complete backtrace retrieval
with instant access to symbol and module name without strings parsing of any
kind.

\section{Installation}

\subsection{Prerequisites}
\begin{enumerate}
\item
Linux or FreeBSD (I haven't performed any testing on other *BSD systems, as
well as on any non-BSD Unix distribution)
\item
\href{http://www.boost.org/boost-build2/}{Boost.Build}
\item
[[glibc]] (other libc implementations wasn't tested yet)
\item
[[g++]] (as Boost.Build uses [[g++]] even for pure C targets build) or
[[clang++]]
\end{enumerate}

\subsection{Pure C library installation}
Change your current working directory to [[backtrace]] source distribution root
and execute the following command:
\begin{verbatim}
bjam /backtrace//backtrace-install release
\end{verbatim}

After this [[backtrace]] library will be built and installed among with required
headers. The default installation prefix is [[/usr/local]] which can be
overridden using [[--prefix=<installation path>]] option:
\begin{verbatim}
bjam /backtrace//backtrace-install release --prefix=/usr
\end{verbatim}

\subsection{C++-library installation}
Change your current working directory to [[backtrace]] source distribution root
and execute the following command:
\begin{verbatim}
bjam /backtrace//backtracexx-install release
\end{verbatim}

As with the pure C library installation, library and headers will be installed
to [[/usr/local]] by default. Both pure C and C++ versions can be installed
using the following command:
\begin{verbatim}
bjam /backtrace//backtrace-install /backtrace//backtracexx-install release
\end{verbatim}

\subsection{Other installation options}

\subsubsection{Static library installation}
[[Backtrace]] can be built as static library by adding [[link=static]] option to
bjam invocation command. It is possible to build and install static and shared
libraries with single command:
\begin{verbatim}
bjam /backtrace//backtracexx-install release link=static,shared
\end{verbatim}

\subsubsection{Debug version installation}
Debug version of [[backtrace]] library can be installed by invoking installation
command without specifying [[release]] build variant in command line:
\begin{verbatim}
bjam /backtrace//backtrace-install
\end{verbatim}

\subsection{Sanity testing}
In order to ensure that [[backtrace]] is sane on current environment, unit-tests
can be used:
\begin{verbatim}
bjam test
\end{verbatim}

In this case, unit-tests will be built, executed and their status will be
reported.  For most users it is enough to check the return code of the command
specified above. As for most Linux utilities zero return code states for
successful tests executions without failures.
Boost.Test is also required to be installed in order to execute tests.

\section{Quick Example}

Here the quick example that will print current function demangled name.
The brief description will be given later.

<<print-function.cpp>>=
#include <iostream>

#include <backtrace/current-frame.hpp>
#include <backtrace/record.h>   // simple backtrace record
#include <backtrace/record.hpp> // demangled backtrace record

struct TMyStruct {
    void Function() const {
        using namespace NBacktrace;
        TBacktraceRecord record(GetCurrentFrame());
        TDemangledBacktraceRecord demangledRecord(record);
        std::cout << "function: "
            << demangledRecord.Function_ << std::endl;
    }
};

int main()
{
    TMyStruct().Function();
}

@ Now compile and link this program using the following command
\begin{verbatim}
gcc print-function.cpp -lbacktrace -lbacktracexx -rdynamic
\end{verbatim}

Launch the resulting binary. The output should be like the following:
\begin{verbatim}
function: TMyStruct::Function() const
\end{verbatim}

So, what does this program doing? First of all, we calls [[GetCurrentFrame]]
function, which obviously returns current frame information stored in
[[TBacktraceRecord]] structure. This structure doesn't perform symbol
demangling, so we're converting it to [[TDemangledBacktraceRecord]]. Now, the
function name is available and can be printed to the standard output.

\section{Reference}

\subsection{[[GetBacktrace]] function}

\subsubsection{Synopsis}
{\small\begin{verbatim}
#include <backtrace/backtrace.h>

TBacktraceRecord* GetBacktrace(int* size, int offset, int initialDepth);
\end{verbatim}}

\subsubsection{Description}
[[GetBacktrace]] function is used for complete call stack retrieval. This
function accepts three parameters:
\begin{description}
\item[size] Output parameter which stores the number of elements in array
returned.
\item[offset] Number of call stack frames to skip. In most cases there is no
need to retrieve the call stack frame of the bottommost function (i.e. function
which is calling [[GetBacktrace]]). In this case 1 can be passed as [[offset]].
Pass 0 here if you want to receive the complete call stack.
\item[initialDepth] Expected call stack depth. [[Backtrace]] will allocate array
of [[initialDepth]] elements to store call stack. If call stack depth is bigger
than size of currently allocated array, [[backtrace]] will call [[realloc]] with
doubled capacity. For example, if current call stack depth is 5 and
[[initialDepth = 2]], then one [[malloc]] will be called to allocate array of
two elements and two [[realloc]]s will be used to enlarge this array from 2 to 4
and from 4 to 8.
\end{description}

\subsubsection{Return value}
[[GetBacktrace]] returns pointer to array of backtrace records which was
allocated using [[malloc]], or [[NULL]] in case of failure.

\subsubsection{Errors}
\begin{description}
\item[EDOM] Memory allocation failure occurred, this can be caused by very big
value of [[initialDepth]] passed to function.
\item[ERANGE] [[offset]] passed to function is bigger that call stack depth, so,
nothing can be returned.
\end{description}

\subsubsection{Example}
Let's write sample program, which uses [[GetBacktrace]] for call stack
retrieval. First of all, we need to include [[backtrace/backtrace.h]] header
file.  After that we can write the function which will be indirectly called from
[[main]] and will print current call stack:
<<use-backtrace.c>>=
#include <backtrace/backtrace.h>
<<additional headers inclusion>>

void print_backtrace()
{
    struct TBacktraceRecord* backtrace;
    <<GetBacktrace invocation>>
    <<print backtrace>>
    /* don't forget to free memory allocated for backtrace */
    free(backtrace);
}

int some_useful_function()
{
    int everything_is_ok = 0;
    /*
        do some calculations here
        and set everithing_is_ok to 1;
     */
    if (!everything_is_ok)
        print_backtrace();
    return everything_is_ok;
}

int main()
{
    some_useful_function();
    return EXIT_SUCCESS;
}

@ As [[GetBacktrace]] uses output parameter, we must declare one and pass its
address as the first parameter. [[print_backtrace]] is just an utility function
and shouldn't print itself in call stack, so we will pass 1 as [[offset]].
[[initialDepth]] will be set to 5 as this will be enough for our program:
<<GetBacktrace invocation>>=
int size, i;
backtrace = GetBacktrace(&size, 1, 5);

@ In order to print information stored in TBacktraceRecord, we need to include
[[backtrace/record.h]], which contains its definition. Since, I'm going to use
[[printf]] as output function, we also need to include [[stdio.h]]. [[stdlib.h]]
also required as is contains [[free]] function definition.
<<additional headers inclusion>>=
#include <backtrace/record.h>
#include <stdio.h>
#include <stdlib.h>

@ [[TBacktraceRecord]] structure is similar to [[Dl_info]] (see [[dladdr(3)]]),
but also contains frame pointer, so we can produce output similar to
[[backtrace_symbols]] one. First of all, we need to check [[GetBacktrace]]
return value:
<<print backtrace>>=
/* handle possible errors */
if (!backtrace)
    exit(EXIT_FAILURE);

if (size < 2) /* main & some_useful_function */
    exit(EXIT_FAILURE);

for (i = 0; i < size; ++i)
{
    /* print module name */
    printf("%s(", backtrace[i].Module_);
    /* check if symbol information is available */
    if (backtrace[i].Symbol_)
    {
        /* print symbol name and frame offset */
        int offset = (const char*)backtrace[i].Frame_
            - (const char*)backtrace[i].SymbolAddress_;
        printf("%s+0x%x", backtrace[i].Symbol_, offset);
    }
    /* print frame pointer */
    printf(") [%p]\n", backtrace[i].Frame_);
}

@ That is! Now you should compile this example and link it with [[backtrace]]
library, and don't forget to add [[-rdynamic]] to add symbol information to the
dynamic symbol table:
\begin{verbatim}
gcc use-backtrace.c -lbacktrace -rdynamic
\end{verbatim}

Launch the resulting executable file and you should see output like the
following:
\begin{verbatim}
./a.out(some_useful_function+0x18) [0x80487e8]
./a.out(main+0xb) [0x80487f8]
/lib/libc.so.6(__libc_start_main+0xf3) [0xb76f7853]
./a.out() [0x8048621]
\end{verbatim}

\subsection{[[GetCurrentFrame]] function}

\subsubsection{Synopsis}
{\small\begin{verbatim}
#include <backtrace/backtrace.h>

int GetCurrentFrame(struct TBacktraceRecord* record, int offset);
\end{verbatim}}

\subsubsection{Description}
[[GetCurrentFrame]] function is used sigle call stack frame retrieval. This
function accepts two parameters:
\begin{description}
\item[record] Is used to store call stack frame information.
\item[offset] Number of call stack frames to skip. 0 means that function called
[[GetCurrentFrame]] will be returned. 1 means that the second function in call
stack will be returned. etc.
\end{description}

\subsubsection{Return value}
[[GetCurrentFrame]] returns 0 if offset is bigger than call stack depth, 1
otherwise, [[record]] will contain frame information in this case.

\subsubsection{Example}
I'm going to write sample program which calls [[GetCurrentFrame]] and prints
symbol name. As with [[GetBacktrace]] in order to use [[GetCurrentFrame]] header
file [[backtrace/backtrace.h]] must be included.
<<current-frame.c>>=
#include <backtrace/backtrace.h>
<<other headers>>

void nested_function()
{
    struct TBacktraceRecord record;
    <<print current function name>>
    <<print main function name>>
}

int main()
{
    nested_function();
    return EXIT_SUCCESS;
}

@ As we going to print information from [[TBacktraceRecord]], we need to include
[[backtrace/record.h]] file. [[stdio.h]] is needed either for symbols names
printing. [[stdlib.h]] is used for error reporting.
<<other headers>>=
#include <backtrace/record.h>
#include <stdio.h>
#include <stdlib.h>

@ Now, we can retrieve current function name by passing 0 as [[offset]]:
<<print current function name>>=
if (!GetCurrentFrame(&record, 0))
    exit(EXIT_FAILURE);
puts(record.Symbol_);

@ Symbol name of calling function([[main]]) can be retrieved by passing 1 as
[[offset]].
<<print main function name>>=
if (!GetCurrentFrame(&record, 1))
    exit(EXIT_FAILURE);
puts(record.Symbol_);

@ Compile and run the resulting program. The output should be like this:
\begin{verbatim}
nested_function
main
\end{verbatim}

\end{document}

